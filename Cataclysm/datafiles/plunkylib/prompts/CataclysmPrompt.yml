messages:
  - system: |
        You are a world-class Python code generator with vast expertise in open source code. You write excellent, robust code. Always explain your complete thinking process before creating the ideal source code.
  - user: |
        You are helping with a 'MagicMethod' class that generates code for a function using:
            1. Caller's suggested function name
            2. All arguments passed (in arg_in and kwargs_in)
            3. Stack trace info to provide useful context for what the app is intended to do
            4. Installed modules (code cannot use modules that are not installed)
            5. Source lines from the call stack
            6. Generated code can only use modules from "Installed Modules" and must always 'import' every dependency in the function body.

        Use the following context info, write a detailed Python script that perfectly satisfies the inferred requirements for <<<function_name>>> (and be sure it is generally useful for common use cases). Code must be formatted to be run within exec() as a string and it must provide an appropriate return value to the caller. The code will have access to args_in and the kwargs_in dictionary, which you must use in the code as needed.

        Write only the exec-ready **body** of the script (importing any modules you need in the body), and remember to put the expected return value in _exec_return_values. Put the comment "#|~~" at the beginning of the code and "#~~|" at the end of the code to be exec'd to make it clear.

        Before writing any code, analyze whether I/O is truly required, explain what makes you think it is. If the caller doesn't need I/O, then it must behave in a read-only manner for files or resources.
        
        After that, discuss the best ways to approach the problem, mention common uses cases we must support, and then explain 1-3 important corner cases to consider (and how to handle them properly) before solving for the logic of <<function_name>>.

        Quote the developer's original calling signature source line in the first comment within the code.

        Solve to replace PUZZLEME in the following code:

        class MagicMethods:
            def generate_code(self, formatted_info, args_in, kwargs_in):
                _exec_return_values = None
                # TODO: Figure out what PUZZLEME should be from the formatted_info
                return exec(PUZZLEME)
            def __getattr__(self, method_name):
                def magic_method_manager(*args_in, **kwargs_in):
                    calling_function_name = method_name
                    inputs_info = []
                    for i, arg_value in enumerate(args_in):
                        inputs_info.append(f'args_in[{{i}}]-> {{type(arg_value).__name__}} = {{arg_value}}')
                    for arg_name, arg_value in kwargs_in.items():
                        inputs_info.append(f'kwargs_in["{{arg_name}}"]-> {{type(arg_value).__name__}} = {{arg_value}}')
                    modules_info = get_installed_modules_info()
                    stack_info = self.tracelines(lines_before=2, lines_after=1, stack_depth=5, stack_skip_recent=1)
                    formatted_info = f"Function: {{calling_function_name}}\n"
                    formatted_info += "Arguments:\n"
                    formatted_info += "\n".join(inputs_info) + "\n"
                    formatted_info += f"Call Stack:\n{{stack_info}}\n"
                    formatted_info += "Source Code: Not available in this case\n"
                    formatted_info += "Installed Modules:\n" + "|".join(modules_info) + "\n"

                    return self.generate_code(formatted_info, args, kwargs)

                return magic_method_manager

        doom = MagicMethods()
        x = doom.<<function_name>>(<<args>>)

        --- Current data for 'formatted_info': ---
        {arg1}
